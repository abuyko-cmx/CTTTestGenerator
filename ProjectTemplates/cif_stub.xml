<?xml version="1.0" encoding="UTF-8"?>

<!--Generated by CTT Stubs Editor 22.03.18 16:25-->
<stubMQ xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ctt.cinimex.ru/stubMQ.xsd" queueIn="ESB_TO_CIF_ADAPTER_QUEUE" queueOut="CIF_2_ESB" lookupTimeout="1000" name="cif_stub" language="groovy" theadPoolSize="20">
  <connectionPool timeout="3600000" maxConnections="115" maxUnusedConnections="30"/>
  <queueManagers>
    <queueManager name="QM2" host="rshb-08.vm.cmx.ru" channel="SYSTEM.DEF.SVRCONN" readEncoding="UTF-8" writeEncoding="UTF-8" user="" password="" port="1415" ccsid="1208">
      <queue objName="CIF_2_ESB" name="CIF_2_ESB"/>
      <queue objName="ESB_TO_CIF_ADAPTER_QUEUE" name="ESB_TO_CIFLE_ADAPTER_QUEUE_"/>
    </queueManager>
  </queueManagers>
  <logConfig level="ALL" writeMessages="true" memoryStore="false"/>
  <global name="global">
    <request>
      <content><![CDATA[]]></content>
    </request>
    <response name="tc_cif"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<inc:operation xmlns:inc="http://rshb/transport/interface" xmlns:env="http://rshb/transport/envelope" xmlns:sec="http://rshb/transport/security">
	<input>
		<env:Header>
			<env:FromSystem>${from_system_resp}</env:FromSystem>
			<env:ToSystem>${to_system_resp}</env:ToSystem>
			<env:Direction>${direction}</env:Direction>
			<env:FromBranch>${from_branch_resp}</env:FromBranch>
			<env:ToBranch>${to_branch_resp}</env:ToBranch>
			<env:Interaction>${interaction}</env:Interaction>
			<env:Service>${service}</env:Service>
		</env:Header>
		<env:Message>${inf_obj}</env:Message>
		<env:Result Status="Success"/>
		<env:Extention>
			<env:name>JMSMessageID</env:name>
			<env:value>${JMSMessageID_resp}</env:value>
		</env:Extention>
		<env:Extention>
			<env:name>JMSMessageGUID</env:name>
			<env:value>${JMSMessageGUID_resp}</env:value>
		</env:Extention>
		<env:Extention>
			<env:name>Direction</env:name>
			<env:value>${direction}</env:value>
		</env:Extention>
		<env:Extention>
			<env:name>SourceObjectType</env:name>
			<env:value>${SourceObjectType}</env:value>
		</env:Extention>
    <xci0:MacInfo xmlns:xci0="http://rshb/transport/envelope">
      <ns1:_hmac xmlns:ns1="http://rshb/transport/security">AB326DC1B96EFE629C5E4D1D5E1CA76187A0851CA0783AA30FFCDF836FE8C176</ns1:_hmac>
      <ns2:_signerId xmlns:ns2="http://rshb/transport/security">CIF</ns2:_signerId>
      <ns3:_secretKeyId xmlns:ns3="http://rshb/transport/security">CIF_1083</ns3:_secretKeyId>
      <ns4:algorithmName xmlns:ns4="http://rshb/transport/security">HMAC (IETF RFC 2104) based on GOST hash</ns4:algorithmName>
      <ns5:macDatetime xmlns:ns5="http://rshb/transport/security">2018-01-26T07:50:32.645Z</ns5:macDatetime>
      <ns6:signer xmlns:ns6="http://rshb/transport/security">Head Office</ns6:signer>
    </xci0:MacInfo>
	</input>
</inc:operation>]]></response>
    <response name="response"><![CDATA[]]></response>
    <response name="response_error"><![CDATA[]]></response>
    <response name="without_io"><![CDATA[]]></response>
    <response name="response_skip_io"><![CDATA[]]></response>
    <script name="global" type="main"><![CDATA[	
	//логика работы заглушки
	def error_list = [6669];
	def skip_list = [74000];

	
	// получаем и парсим запрос
	def request = contextRequest.getRequest().toString();
	operation = new XmlSlurper(false,true).parseText(request);
	
	//функция получения extention
	public String getData (String ext_name) {
		try {    
			ext_name = operation.'**'.find { it.text() == ext_name}.parent().value.text();
		} catch (e) {
			ext_name = null
		}
		return ext_name;
    }

	//получаем extention
    def JMSMessageID_req = getData('JMSMessageID');
    def JMSMessageGUID_req = getData('JMSMessageGUID');
	def SourceObjectType = getData('SourceObjectType')
	def NameComposite = getData('NameComposite')

	//получаем остальные параметры ТК
	from_system_req = operation.input.Header.FromSystem.text()
	to_system_req = operation.input.Header.ToSystem.text()
	from_branch_req = operation.input.Header.FromBranch.text()
	to_branch_req = operation.input.Header.ToBranch.text()
	service = operation.input.Header.Service.text()
	inf_obj_req = operation.input.Message.text()

	//получаем данные из ИО
	def rootNode = new XmlSlurper(false,true).parseText(inf_obj_req);
	check_id = rootNode.'**'.find {it.name()  == 'ObjectId'}.toInteger()


	if (check_id in error_list){
	inf_obj_template = "response_error" 
	} else if (check_id in skip_list) {
	inf_obj_template = "response_skip_io"
	} else {
	inf_obj_template = "response"
	}

	//подготавливаем ответ
	JMSMessageID_resp = UUID.randomUUID().toString();
	
	response = contextResponse.getTemplate("tc_cif");
	inf_obj = contextResponse.getTemplate(inf_obj_template);

	response.setParam("from_system_resp", to_system_req.toString());
	response.setParam("to_system_resp", from_system_req.toString());
	response.setParam("direction", "ANSWER");
	response.setParam("from_branch_resp", to_branch_req.toString());
	response.setParam("to_branch_resp", from_branch_req.toString());
	response.setParam("interaction", "ASYNC");
	response.setParam("service", service.toString());
	response.setParam("inf_obj", inf_obj.toString(), "ESCAPE");

	//устанавливаем extention
	response.setParam("JMSMessageID_resp", JMSMessageID_resp.toString());
	response.setParam("JMSMessageGUID_resp", JMSMessageGUID_req.toString());
	response.setParam("SourceObjectType", SourceObjectType.toString());

	//добавляем экстеншн для МИПа (решение пока не идеальное, но должно работать)
	  if (NameComposite != null) {
	     
		compositeNameExtXml = """<env:Extention xmlns:env="http://rshb/transport/envelope">
		  <env:name>NameComposite</env:name>
		  <env:value>""" + NameComposite + """</env:value></env:Extention>"""

		compositeNameExt = new XmlSlurper(false,true).parseText(compositeNameExtXml);
		response_parsed = new XmlSlurper(false,true).parseText(response.toString());
		
	    def MacInfo = response_parsed.input.MacInfo;
	    if (MacInfo != null) {
	        response_parsed.input.MacInfo.replaceNode{};
	    }
	    
	    def newMacInfo = """<env:MacInfo _isMacCorrect="1" xmlns:env="http://rshb/transport/envelope" xmlns:sec="http://rshb/transport/security">
			<sec:_hmac>String</sec:_hmac>
			<sec:_signerId>String</sec:_signerId>
			<sec:_secretKeyId>String</sec:_secretKeyId>
			<sec:algorithmName>String</sec:algorithmName>
			<sec:macDatetime>2001-12-17T09:30:47Z</sec:macDatetime>
			<sec:signer>String</sec:signer>
		</env:MacInfo>"""
		
		newMacInfo = new XmlSlurper(false,true).parseText(newMacInfo);
	    println newMacInfo
	    
		response_parsed.input.appendNode(compositeNameExt);
		response_parsed.input.appendNode(newMacInfo);
		response = groovy.xml.XmlUtil.serialize(response_parsed);
	}

	return response]]></script>
  </global>
</stubMQ>
